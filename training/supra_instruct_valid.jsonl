{"messages": [{"role": "user", "content": "How do I implement a binary search tree in Python?"}, {"role": "assistant", "content": "Here's a complete implementation of a Binary Search Tree in Python:\n\n```python\nclass TreeNode:\n    \"\"\"Node class for Binary Search Tree.\"\"\"\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    \"\"\"Binary Search Tree implementation.\"\"\"\n\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        \"\"\"Insert a value into the BST.\"\"\"\n        if not self.root:\n            self.root = TreeNode(value)\n        else:\n            self._insert_recursive(self.root, value)\n\n    def _insert_recursive(self, node, value):\n        if value < node.value:\n            if node.left is None:\n                node.left = TreeNode(value)\n            else:\n                self._insert_recursive(node.left, value)\n        elif value > node.value:\n            if node.right is None:\n                node.right = TreeNode(value)\n            else:\n                self._insert_recursive(node.right, value)\n\n    def search(self, value):\n        \"\"\"Search for a value in the BST.\"\"\"\n        return self._search_recursive(self.root, value)\n\n    def _search_recursive(self, node, value):\n        if node is None:\n            return False\n        if value == node.value:\n            return True\n        elif value < node.value:\n            return self._search_recursive(node.left, value)\n        else:\n            return self._search_recursive(node.right, value)\n\n    def inorder_traversal(self):\n        \"\"\"Return inorder traversal of the BST.\"\"\"\n        result = []\n        self._inorder_recursive(self.root, result)\n        return result\n\n    def _inorder_recursive(self, node, result):\n        if node:\n            self._inorder_recursive(node.left, result)\n            result.append(node.value)\n            self._inorder_recursive(node.right, result)\n\n    def find_min(self):\n        \"\"\"Find minimum value in the BST.\"\"\"\n        if not self.root:\n            return None\n        current = self.root\n        while current.left:\n            current = current.left\n        return current.value\n\n    def find_max(self):\n        \"\"\"Find maximum value in the BST.\"\"\"\n        if not self.root:\n            return None\n        current = self.root\n        while current.right:\n            current = current.right\n        return current.value\n\n# Example usage:\nbst = BinarySearchTree()\nvalues = [50, 30, 70, 20, 40, 60, 80]\nfor val in values:\n    bst.insert(val)\n\nprint(bst.search(40))  # True\nprint(bst.search(45))  # False\nprint(bst.inorder_traversal())  # [20, 30, 40, 50, 60, 70, 80]\nprint(bst.find_min())  # 20\nprint(bst.find_max())  # 80\n```\n\n**Time Complexities:**\n- Search: O(h) where h is height, O(log n) average, O(n) worst\n- Insert: O(h), same as search\n- Delete: O(h), same as search\n- Space: O(n) for storing n nodes"}]}
